#include "stm32f4xx_hal.h"
#include "ff.h" // FatFs library for file handling
#include "delay.h"
#include "stdio.h"

#define SD_SPI_HANDLE  hspi1    // Adjust with your SPI handle if needed
extern SPI_HandleTypeDef SD_SPI_HANDLE;

FATFS FatFs;    // FatFs instance
FIL file;       // File object
FRESULT res;    // FatFs result
char filename[] = "posture_log.txt";  // Log file name

SPI_HandleTypeDef hspi1;

void SPI_Init(void) {
    // SPI initialization code (configure SPI pins, set up SPI peripheral)
    hspi1.Instance = SPI1;
    hspi1.Init.Mode = SPI_MODE_MASTER;
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
    hspi1.Init.NSS = SPI_NSS_SOFT;
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
    hspi1.Init.CRCPolynomial = 10;

    if (HAL_SPI_Init(&hspi1) != HAL_OK) {
        // Error handling code
    }
} 

void SD_Init(void)
{
    // Initialize SPI (assuming SPI1 is configured)
    HAL_SPI_Init(&SD_SPI_HANDLE);
    
    // Mount the SD card
    res = f_mount(&FatFs, "", 1);
    if (res != FR_OK) {
        printf("SD Mount Failed!\r\n");
        while(1);  // Handle error
    }

    // Open the log file (create if doesn't exist)
    UINT bw;
    res = f_open(&file, filename, FA_OPEN_ALWAYS | FA_WRITE);
    if (res != FR_OK) {
        printf("File Open Failed!\r\n");
        while(1);  // Handle error
    }

    // Move the file pointer to the end for appending data
    f_lseek(&file, f_size(&file));
}

void LogPostureData(float pressure_value)
{
    char log_entry[64];
    uint32_t timestamp = HAL_GetTick();  // Get system uptime as timestamp

    // Prepare the log entry
    snprintf(log_entry, sizeof(log_entry), "Time: %lu ms, Pressure: %.4f MPa\r\n", timestamp, pressure_value);

    // Write the log entry to the SD card
    res = f_write(&file, log_entry, strlen(log_entry), &bw);
    if (res != FR_OK) {
        printf("Error writing to SD card!\r\n");
    }
}

int main(void)
{
    HAL_Init();
    uart2_rxtx_init();

    // Initialize SD Card
    SD_Init();
    
    // Initialize pressure sensor
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;  // Enable GPIOA clock
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;   // Enable ADC1 clock
    GPIOA->MODER |= GPIO_MODER_MODER1;    // Set PA1 as analog mode
    ADC1->CR2 = 0;                        // Disable ADC
    ADC1->CR2 |= ADC_CR2_CONT;            // Continuous conversion
    ADC1->SQR3 |= 1;                      // Select channel 1 (PA1)
    ADC1->CR2 |= 1;                       // Enable ADC
    ADC1->CR2 |= ADC_CR2_SWSTART;         // Start conversion

    while(1)
		{
			printf("pressure is = %f MPa\r\n",pressure(get_voltage()));
			delay(500);
		}

    #define PRESSURE_THRESHOLD 0.1f  // Adjust as necessary for posture detection

void CheckPostureAndAlert(float pressure_value)
{
    if (pressure_value > PRESSURE_THRESHOLD)
    {
        Motor_Start();  // Start vibrating motor for bad posture
    }
    else
    {
        Motor_Stop();   // Stop motor when posture is corrected
    }
}

    // Main loop
    while (1)
    {
        // Get the voltage from the sensor
        float voltage = get_voltage();
        float pressure_value = pressure(voltage);

        Serial.print("Sensor 1: ");
        Serial.print(pressure_value);
        Serial.print('\n');

        // Print to UART for debugging
        printf("Pressure: %.4f MPa\r\n", pressure_value);

        // Log the posture data to the SD card
        LogPostureData(pressure_value);

        // Wait for a short interval before logging the next data point
        delay(1000);  // Log every 1 second (adjust as needed)

        CheckPostureAndAlert (pressure_value);
    }
}


